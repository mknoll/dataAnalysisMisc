#(mfrow=c(2,2))
#plot(fit)
summary(fit)
########## PLOT DIFFERENCES - WWACHSTUMSGESCHWINDIGKEIT #######
########### MIGRATION ############################
plot(mig_d0[,"diff"]~mig_d0[,"time"], ylim=c(0,40), col=1, main="Migration miR-222 U251",
xlab="Zeit [h]", ylab="\u0394Fl?che miR vs. Kontrollen [%]")
abline(lm(mig_d0[0:4,"diff"]~mig_d0[0:4,"time"]), col=1, lwd=1.3)
summary(lm(mig_d0[0:4,"diff"]~mig_d0[0:4,"time"]))
text(35, 5, "adj R² 0.9, p=0.03")
points(mig_d2[,"diff"]~mig_d2[,"time"], col=26)
abline(lm(mig_d2[0:4,"diff"]~mig_d2[0:4,"time"]), col=26, lwd=1.3)
summary(lm(mig_d2[0:4,"diff"]~mig_d2[0:4,"time"]))
legend(0, 40, c("0 Gy", "2 Gy"), col=c(1,26), lty=c(1,1), bty="n")
text(35, 8, "adj R² 0.98, p=0.01", col=2)
###### DID regression MIGRATION
migr_dat0 <- cbind(migr_dat0, rep(0, length(migr_dat0[,1])))
colnames(migr_dat0)[5] <- "dose"
migr_dat2 <- cbind(migr_dat2, rep(2, length(migr_dat2[,1])))
colnames(migr_dat2)[5] <- "dose"
#d0T <- subset(migr_dat0, migr_dat0[,"treatment"] == "PreMir-17-92" | migr_dat0[,"treatment"] == "wt" )
d0T <- subset(migr_dat0, migr_dat0[,"treatment"] == "PreMir-17-92" | (migr_dat0[,"treatment"] != "PreMir-17-92" & !grepl("222", migr_dat0[,"treatment"])))
group <- ifelse(d0T[,"treatment"] == "PreMir-17-92", 1, 0)
d0T <- cbind(d0T, group)
#d2T <- subset(migr_dat2, migr_dat2[,"treatment"] == "PreMir-17-92" |  migr_dat2[,"treatment"] == "wt" )
d2T <- subset(migr_dat2, migr_dat2[,"treatment"] == "PreMir-17-92" | (migr_dat2[,"treatment"] != "PreMir-17-92" & !grepl("222", migr_dat2[,"treatment"])))
group <- ifelse(d2T[,"treatment"] == "PreMir-17-92", 1, 0)
d2T <- cbind(d2T, group)
dAll <- rbind(d0T, d2T)
######caluclate p values
i <- 0
for (t in levels(factor(dAll[,"time_h"]))) {
i <- i+1
dAllSub <- subset(dAll, dAll[,"time_h"] == t) #24
#dAllSub <- subset(dAllSub, dAllSub[,"treatment"] == "Pre-miR-17-92" |  dAllSub[,"treatment"] == "wt" )
dAllSub$group <- factor(dAllSub$group)
dAllSub$dose <- factor(dAllSub$dose)
contrasts(dAllSub$dose) = contr.poly(2)
contrasts(dAllSub$group) = contr.poly(2)
fit <- aov(anteil_zugewachsen ~ dose*group, data=dAllSub)
#summary(fit)
#summary(glht(fit, linfct=mcp(dose="Tukey"))) #p=0.02
st <- TukeyHSD(fit)
st
p <- st$`dose:group`["2:1-2:0",4]
p <- round(p, 3)
if (is.na(p)) {
next
}
pr = ""
if (p <= 0.08) {
pr = "."
}
if (p <= 0.05) {
pr = "*"
}
if (p <= 0.01) {
pr = "**"
}
if (p <= 0.001) {
pr = "***"
}
#text(t, mig_d2[i,"diff"]+3, pr)
}
################################################
########### INVASION ###########################
plot(d0[,"diff"]~d0[,"time"], ylim=c(0,40), col=1, main="Invasion miR-222 U251",
xlab="Zeit [h]", ylab="\u0394Fl?che miR vs. Kontrollen [%]")
abline(lm(d0[,"diff"]~d0[,"time"]), col=1, lwd=1.3)
summary(lm(d0[,"diff"]~d0[,"time"]))
text(35, 0, "adj R² 0.94, p<0.001")
points(d2[,"diff"]~d2[,"time"], col=26)
abline(lm(d2[1:4,"diff"]~d2[1:4,"time"]), col=26, lwd=1.3)
summary(lm(d2[1:4,"diff"]~d2[1:4,"time"]))
legend(0, 40, c("0 Gy", "2 Gy"), col=c(1,26), lty=c(1,1), bty="n")
text(35, 3, "adj R² 0.97, p=0.01 ", col=2)
###### DID regression INVASION
data0 <- cbind(data0, rep(0, length(data0[,1])))
colnames(data0)[5] <- "dose"
data2 <- cbind(data2, rep(2, length(data2[,1])))
colnames(data2)[5] <- "dose"
d0T <- subset(data0, data0[,"treatment"] == "Pre-miR-17-92" | (data0[,"treatment"] != "Pre-miR-17-92" & !grepl("222", data0[,"treatment"])))
group <- ifelse(d0T[,"treatment"] == "Pre-miR-17-92", 1, 0)
d0T <- cbind(d0T, group)
d2T <- subset(data2, data2[,"treatment"] == "Pre-miR-17-92" | (data2[,"treatment"] != "Pre-miR-17-92" & !grepl("222", data2[,"treatment"])))
group <- ifelse(d2T[,"treatment"] == "Pre-miR-17-92", 1, 0)
d2T <- cbind(d2T, group)
dAll <- rbind(d0T, d2T)
######caluclate p values
i <- 0
for (t in levels(factor(dAll[,"time_h"]))) {
i <- i+1
dAllSub <- subset(dAll, dAll[,"time_h"] == t) #24
#dAllSub <- subset(dAllSub, dAllSub[,"treatment"] == "Pre-miR-17-92" |  dAllSub[,"treatment"] == "wt" )
dAllSub$group <- factor(dAllSub$group)
dAllSub$dose <- factor(dAllSub$dose)
contrasts(dAllSub$dose) = contr.poly(2)
contrasts(dAllSub$group) = contr.poly(2)
fit <- aov(anteil_zugewachsen ~ dose*group, data=dAllSub)
#summary(fit)
#summary(glht(fit, linfct=mcp(dose="Tukey"))) #p=0.02
st <- TukeyHSD(fit)
st
p <- st$`dose:group`["2:1-2:0",4]
p <- round(p, 3)
if (is.na(p)) {
next
}
pr = ""
if (p <= 0.08) {
pr = "."
}
if (p <= 0.05) {
pr = "*"
}
if (p <= 0.01) {
pr = "**"
}
if (p <= 0.001) {
pr = "***"
}
text(t, d2[i,"diff"]+3, pr)
}
dev.off()
#######################################miR control ############################
##### read normlaized data
dat <- read.csv("C:/Users/Elena Schnabel/Documents/MD/R-Dateien von Max/data/cell_exp_222_221__19_72/control_qpcr_u215.csv", dec=",", row.names=1)
mean_ctrl <- apply(dat[7:8,], 2, mean)
dat <- sweep(dat, 2, mean_ctrl, "-")
dat <- read.csv("C:/Users/Elena Schnabel/Documents/MD/R-Dateien von Max/data/cell_exp_222_221__19_72/qpcr_norm_u251.csv",dec=",")
dat <- read.csv("C:/Users/Elena Schnabel/Documents/MD/R-Dateien von Max/data/cell_exp_222_221__19_72/q_pcrq_norm_final.csv", dec=",")
#dat <- cbind(dat, c("miRZip","Pre-miR","MiRZ-000","wt","miRZip","Pre-miR","MiRZ-000","wt"))
colnames(dat)[4] <- "group"
#dat[,"value"] <- (1-dat[,"value"])*-1
'barchart(dat$value~dat$target, groups=dat$group, horizontal=F, ylab="Normalized ct value", xlab="Targets",
auto.key=list(space="right", cex.title=1, columns=1),
main="Expression control")
'
#dat <- subset(dat, dat[,"target"] == "MiR-222")
dat <- dat[1:3,]
barplot(dat[,1], xpd=F, names.arg=dat[,"group"], las=2, col=c(0,0,0,1,1,1), ylab="Relative Expression", main="MiR-222 Expression")
#segments(0,0.90,10,0.90)
#legend(0, 1.1, c("MiR-222", "MiR-19b"), fill=c(0,1), bty="n")
dev.off()
## path of the ImageJ executable
options(ImageJ="/home/mknoll/Downloads/Fiji.app/ImageJ-linux64")
img <- loadImages("../data/clono_single/")
img <- lapply(img, function(x) if(grepl("WT", x$name)) { x })
img <- img[-which(sapply(img, is.null))]
img <- img[1:2]
load("../analysis/coll_KoVsTreatment_V1235_r2cv")
10*117*30
10*117*30/60
585/60
117*30
##The ImageJ executable
options(ImageJ="/home/mknoll/phd/projects/clonogenicsU87/Fiji.app/ImageJ-linux64")
require(clonogenicsU87)
data("img", package="clonogenicsU87")
data("imgEmpty", package="clonogenicsU87")
calcEmpty <- calcForGivenParameters(imgEmpty)
imgEmpty
calc <- calcForGivenParameters(img, cand=clonogenicsU87:::cand)
data("cand", package="clonogenicsU87")
calc <- calcForGivenParameters(img, cand=cand)
image(img[[1]]$data)
length(img)
image(img[[1]]$image)
image(img[[1]]$image, bty='n')
image(img[[1]]$image, bty='n', col=gray.colors(1024))
image(img[[1]]$image, bty='n', col=gray.colors(1024), xaxt='n', yaxt='n')
par(mfrow=c(1,2), mar=c(0,0,0,))
par(mfrow=c(1,2), mar=c(0,0,0,0))
image(img[[1]]$image, bty='n', col=gray.colors(1024), xaxt='n', yaxt='n')
par(mfrow=c(1,2), mar=c(0,0,0,0))
par(mar=c(0,0,0,0))
image(img[[1]]$image, bty='n', col=gray.colors(1024), xaxt='n', yaxt='n')
dev.off()
par(mar=c(0,0,0,0))
image(img[[1]]$image, bty='n', col=gray.colors(1024), xaxt='n', yaxt='n')
image(imgEmpty[[1]]$image, bty='n', col=gray.colors(1024), xaxt='n', yaxt='n')
imgEmpty[[1]]$image
imgEmpty <- loadImages(tmpFolder, n=1, tiffInd=1)
image(imgEmpty[[1]]$image, bty='n', col=gray.colors(1024), xaxt='n', yaxt='n')
8/14
6/7
6/38
7(38)
7/38
1/7
2/7
m <- matrix(10, 5. rnorm(20))
m <- matrix(10, 5. rnorm(20))
m <- matrix(10, 5, rnorm(20))
m
m <- matrix(ncol=10, nrow=5, rnorm(20))
m
rI <- c(1,2,3,6)
cI <- c(3,4,5,4)
m[rI,cI]
m <- matrix(ncol=10, nrow=10, rnorm(20))
m
rI <- c(1,2,3,6)
cI <- c(3,4,5,4)
m[rI,cI]
m <- matrix(ncol=10, nrow=10, sample(c(1,2), replace=T))
m
m <- matrix(ncol=10, nrow=10, sample(n=10*10, c(1,2), replace=T))
m
m <- matrix(ncol=10, nrow=10, sample(x=c(1,2), 10*10, replace=T))
m
m <- matrix(ncol=10, nrow=10, sample(x=c(1,0), 10*10, replace=T))
m
rI <- c(1,2,3,6)
cI <- c(3,4,5,4)
sum(m[rI,cI])
m[rI,cI]
require(oro.dicom)
install.packages("oro.dicom")
path <- "/mnt/usb/PAIRED_GBM_IMAGING/1006113/2006-08-02"
fl <- list.files(path)
fl <- list.files(path, full.names=T)
fl
path <- "/mnt/usb/PAIRED_GBM_IMAGING/1006113/2006-08-02/"
fl <- list.files(path, full.names=T)
fl
fl <- list.files(path, full.names=T ,recursive=T)
fl
fl<- fl[which(grepl(".dcm", fl))]
require(oro.dicom)
dicomF <- readDICOM(fl[1])
dicomF
image(dicomF)
dim(dicomF)
str(dicomF)
image(dicomF$img)
dicomF$hdr
hdr <- dicomF$hdr
hdr <- dicomF$hdr[[1]]
hdr[which(hdr$name == "SeriesDescription"),]
desc<- list()
for (i in 1:length(fl)) {
dicomF <- readDICOM(fl[i])
hdr <- dicomF$hdr[[i]]
desc[[length(desc)+1]] <- hdr[which(hdr$name == "SeriesDescription"),]
}
i
dicomF <- readDICOM(fl[i])
hdr <- dicomF$hdr[[i]]
dicomF
str(dicomF)
str(dicomF[[1]])
hdr <- dicomF$hdr[[i]][[1]]
for (i in 1:length(fl)) {
dicomF <- readDICOM(fl[i])
hdr <- dicomF$hdr[[i]][[1]]
desc[[length(desc)+1]] <- hdr[which(hdr$name == "SeriesDescription"),]
}
hdr <- dicomF$hdr[[1]]
hdr
desc<- list()
for (i in 1:length(fl)) {
dicomF <- readDICOM(fl[i])
hdr <- dicomF$hdr[[1]]
desc[[length(desc)+1]] < hdr[which(hdr$name == "SeriesDescription"),]
}
hdr[which(hdr$name == "SeriesDescription"),]
desc<- list()
for (i in 1:length(fl)) {
dicomF <- readDICOM(fl[i])
hdr <- dicomF$hdr[[1]]
desc[[length(desc)+1]] <- hdr[which(hdr$name == "SeriesDescription"),]
}
desc<- list()
for (i in 1:length(fl)) {
print(i)
dicomF <- readDICOM(fl[i])
hdr <- dicomF$hdr[[1]]
desc[[length(desc)+1]] <- hdr[which(hdr$name == "SeriesDescription"),]
}
length(fkl)
length(fl)
hdr
hdr[which(hdr$name == "SeriesDescription"),]
desc[[length(desc)+1]] <- hdr$value[which(hdr$name == "SeriesDescription")]
hdr$value[which(hdr$name == "SeriesDescription")]
desc<- list()
for (i in 1:length(fl)) {
print(i)
dicomF <- readDICOM(fl[i])
hdr <- dicomF$hdr[[1]]
desc[[length(desc)+1]] <- hdr$value[which(hdr$name == "SeriesDescription")]
}
desc
unlist(desc)
readDICOM
tmp <-    readDICOMFile(fl[i])
tmp
readDICOMFile
readDICOMHeader <- function (fname, boffset = NULL, endian = "little", flipud = TRUE,
skipSequence = FALSE, pixelData = TRUE, warn = -1, debug = FALSE)
{
oldwarn <- getOption("warn")
options(warn = warn)
fsize <- file.info(fname)$size
fraw <- readBin(fname, "raw", n = as.integer(fsize), endian = endian)
if (is.null(boffset) && any(as.integer(fraw[1:128]) != 0)) {
stop("Non-zero bytes are present in the first 128, please use\nboffset to skip the necessary number of bytes.")
}
skip128 <- fraw[1:128]
skipFirst128 <- ifelse(any(as.logical(skip128)), FALSE, TRUE)
if (debug) {
cat("# First 128 bytes of DICOM header =", fill = TRUE)
print(skip128)
}
DICM <- .rawToCharWithEmbeddedNuls(fraw[129:132]) == "DICM"
if (debug) {
cat("# DICM =", DICM, fill = TRUE)
}
dicomHeader <- sequence <- NULL
seq.txt <- ""
if (is.null(boffset)) {
bstart <- 1 + ifelse(skipFirst128, 128, 0) + ifelse(DICM,
4, 0)
}
else {
bstart <- boffset + 1
}
dcm <- parseDICOMHeader(fraw[bstart:fsize], seq.txt, endian = endian,
verbose = debug)
hdr <- as.data.frame(dcm$header, stringsAsFactors = FALSE)
row.names(hdr) <- NULL
names(hdr) <- c("group", "element", "name", "code", "length",
"value", "sequence")
return(hdr)
}
tmp <- readDICOMHeader(fl[i])
readDICOMHeader <- function (fname, boffset = NULL, endian = "little", flipud = TRUE,
skipSequence = FALSE, pixelData = TRUE, warn = -1, debug = FALSE)
{
oldwarn <- getOption("warn")
options(warn = warn)
fsize <- file.info(fname)$size
fraw <- readBin(fname, "raw", n = as.integer(fsize), endian = endian)
if (is.null(boffset) && any(as.integer(fraw[1:128]) != 0)) {
stop("Non-zero bytes are present in the first 128, please use\nboffset to skip the necessary number of bytes.")
}
skip128 <- fraw[1:128]
skipFirst128 <- ifelse(any(as.logical(skip128)), FALSE, TRUE)
if (debug) {
cat("# First 128 bytes of DICOM header =", fill = TRUE)
print(skip128)
}
DICM <- oro.dicom::::.rawToCharWithEmbeddedNuls(fraw[129:132]) == "DICM"
if (debug) {
cat("# DICM =", DICM, fill = TRUE)
}
dicomHeader <- sequence <- NULL
seq.txt <- ""
if (is.null(boffset)) {
bstart <- 1 + ifelse(skipFirst128, 128, 0) + ifelse(DICM,
4, 0)
}
else {
bstart <- boffset + 1
}
dcm <- parseDICOMHeader(fraw[bstart:fsize], seq.txt, endian = endian,
verbose = debug)
hdr <- as.data.frame(dcm$header, stringsAsFactors = FALSE)
row.names(hdr) <- NULL
names(hdr) <- c("group", "element", "name", "code", "length",
"value", "sequence")
return(hdr)
}
readDICOMHeader <- function (fname, boffset = NULL, endian = "little", flipud = TRUE,
skipSequence = FALSE, pixelData = TRUE, warn = -1, debug = FALSE)
{
oldwarn <- getOption("warn")
options(warn = warn)
fsize <- file.info(fname)$size
fraw <- readBin(fname, "raw", n = as.integer(fsize), endian = endian)
if (is.null(boffset) && any(as.integer(fraw[1:128]) != 0)) {
stop("Non-zero bytes are present in the first 128, please use\nboffset to skip the necessary number of bytes.")
}
skip128 <- fraw[1:128]
skipFirst128 <- ifelse(any(as.logical(skip128)), FALSE, TRUE)
if (debug) {
cat("# First 128 bytes of DICOM header =", fill = TRUE)
print(skip128)
}
DICM <- oro.dicom:::.rawToCharWithEmbeddedNuls(fraw[129:132]) == "DICM"
if (debug) {
cat("# DICM =", DICM, fill = TRUE)
}
dicomHeader <- sequence <- NULL
seq.txt <- ""
if (is.null(boffset)) {
bstart <- 1 + ifelse(skipFirst128, 128, 0) + ifelse(DICM,
4, 0)
}
else {
bstart <- boffset + 1
}
dcm <- parseDICOMHeader(fraw[bstart:fsize], seq.txt, endian = endian,
verbose = debug)
hdr <- as.data.frame(dcm$header, stringsAsFactors = FALSE)
row.names(hdr) <- NULL
names(hdr) <- c("group", "element", "name", "code", "length",
"value", "sequence")
return(hdr)
}
tmp <- readDICOMHeader(fl[i])
tmp
png("../analysis/overview_cnv.png", res=250, width=1200, height=1400)
pheatmap::pheatmap(candidatesFINAL,
annotation_row = anno_row[, "Chromosome", drop = FALSE],
cluster_rows = FALSE, clustering_method="ward.D2", col=c("royalblue", "gray", "tomato"))
dev.off()
write.csv(candidatesFINAL, "../analysis/cnv_candidatesFINAL.csv")
setwd("~/phd/projects/wy")
data <- read.table("mice.txt")[,]
grp <- as.integer(c(rep(0, 4), rep(1, 4)))
dyn.load("wy.so")
ret <- .C("tTest_unpaired_unequalVar",
data=as.numeric(unlist(t(data))),
lenRows=length(data[,1]),
grp=grp, lenGrp=length(grp),
B=as.integer(200),
pval=numeric(length(data[,1])))
setwd("~/phd/projects/wy")
data <- read.table("mice.txt")[1:100,]
grp <- as.integer(c(rep(0, 4), rep(1, 4)))
dyn.load("wy.so")
ret <- .C("tTest_unpaired_unequalVar",
data=as.numeric(unlist(t(data))),
lenRows=length(data[,1]),
grp=grp, lenGrp=length(grp),
B=as.integer(200),
pval=numeric(length(data[,1])))
setwd("~/phd/projects/wy")
data <- read.table("mice.txt")[1:100,]
grp <- as.integer(c(rep(0, 4), rep(1, 4)))
dyn.load("wy.so")
ret <- .C("tTest_unpaired_unequalVar",
data=as.numeric(unlist(t(data))),
lenRows=length(data[,1]),
grp=grp, lenGrp=length(grp),
B=as.integer(200),
pval=numeric(length(data[,1])))
setwd("~/phd/projects/wy")
data <- read.table("mice.txt")[1:100,]
grp <- as.integer(c(rep(0, 4), rep(1, 4)))
dyn.load("wy.so")
ret <- .C("tTest_unpaired_unequalVar",
data=as.numeric(unlist(t(data))),
lenRows=length(data[,1]),
grp=grp, lenGrp=length(grp),
B=as.integer(300),
pval=numeric(length(data[,1])))
setwd("~/phd/projects/wy")
data <- read.table("mice.txt")[1:100,]
grp <- as.integer(c(rep(0, 4), rep(1, 4)))
dyn.load("wy.so")
ret <- .C("tTest_unpaired_unequalVar",
data=as.numeric(unlist(t(data))),
lenRows=length(data[,1]),
grp=grp, lenGrp=length(grp),
B=as.integer(300),
pval=numeric(length(data[,1])))
setwd("~/phd/projects/wy")
data <- read.table("mice.txt")[1:100,]
grp <- as.integer(c(rep(0, 4), rep(1, 4)))
dyn.load("wy.so")
ret <- .C("tTest_unpaired_unequalVar",
data=as.numeric(unlist(t(data))),
lenRows=length(data[,1]),
grp=grp, lenGrp=length(grp),
B=as.integer(500),
pval=numeric(length(data[,1])))
setwd("~/phd/projects/wy")
data <- read.table("mice.txt")[1:100,]
grp <- as.integer(c(rep(0, 4), rep(1, 4)))
dyn.load("wy.so")
ret <- .C("tTest_unpaired_unequalVar",
data=as.numeric(unlist(t(data))),
lenRows=length(data[,1]),
grp=grp, lenGrp=length(grp),
B=as.integer(500),
pval=numeric(length(data[,1])))
setwd("~/phd/projects/wy")
data <- read.table("mice.txt")[1:100,]
grp <- as.integer(c(rep(0, 4), rep(1, 4)))
dyn.load("wy.so")
ret <- .C("tTest_unpaired_unequalVar",
data=as.numeric(unlist(t(data))),
lenRows=length(data[,1]),
grp=grp, lenGrp=length(grp),
B=as.integer(100),
pval=numeric(length(data[,1])))
##############################
Cstack_info()
system("ulimit -s")
Cstack_info()
system("ulimit -s 16384")
Cstack_info()
data <- data[,order(grp)]
grp <- as.numeric(as.factor(grp))
setwd("~/phd/projects/dataAnalysisMisc/dataAnalysisMisc/")
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenise()
